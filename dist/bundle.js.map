{"version":3,"sources":["webpack:///webpack/bootstrap 785ad6db01af58a1fe1a","webpack:///./src/index.js"],"names":["Es2sql","API_V","Cartodb","__type__","fetch","config","query","url","urlWithQuery","sql","Promise","resolve","reject","user","_parseDatasetUrl","match","_getUrl","_defaultQuery","table","encodeURIComponent","_getQueryString","then","res","json","data","output","fields","Object","keys","map","val","i","id","rows","useMemoryStore","catch","e","translate","from","size","s","replace","split"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA,QAAOA,MAAP,MAAmB,QAAnB;;AAEA,OAAMC,QAAQ,IAAd;AACA,KAAIC,UAAU,EAAd;;AAEAA,SAAQC,QAAR,GAAmB,SAAnB;;AAEAD,SAAQE,KAAR,GAAgB,UAAUC,MAAV,EAAkB;AAChC,OAAIC,KAAJ,EAAWC,GAAX,EAAgBC,YAAhB,EAA8BC,GAA9B;AACA,UAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxC;AACA,SAAIP,OAAOE,GAAX,EAAgB;AACZA,aAAMF,OAAOE,GAAb;AACHF,cAAOQ,IAAP,GAAcX,QAAQY,gBAAR,CAAyBT,OAAOE,GAAhC,CAAd;AACAD,eAAQD,OAAOE,GAAP,CAAWQ,KAAX,CAAiB,SAAjB,CAAR;AACD;AACC,MALD,MAKO;AACHR,aAAML,QAAQc,OAAR,CAAgBX,MAAhB,CAAN;AACHC,eAAQD,OAAOC,KAAP,IAAgBJ,QAAQe,aAAR,CAAsBZ,MAAtB,CAAxB;AACAC,aAAMY,KAAN,GAAcb,OAAOa,KAArB;AACAZ,eAAQa,mBAAmBjB,QAAQkB,eAAR,CAAwBd,KAAxB,CAAnB,CAAR;AACA;AACCE,oBAAeD,MAAID,KAAnB;AACF;AACEF,WAAMI,YAAN,EACGa,IADH,CACQC,OAAO;AACX,cAAOA,IAAIC,IAAJ,EAAP;AACD,MAHH,EAIGF,IAJH,CAIQG,QAAQ;AACZ,WAAIC,MAAJ;AACA,WAAIC,SAASC,OAAOC,IAAP,CAAYJ,KAAKE,MAAjB,EAAyBG,GAAzB,CAA6B,UAASC,GAAT,EAAcC,CAAd,EAAiB;AACzD,gBAAO,EAACC,IAAIF,GAAL,EAAP;AACD,QAFY,CAAb;AAGAL,gBAAS;AACPC,iBAAQA,MADD;AAEPO,eAAOT,KAAKS,IAFL;AAGPC,yBAAgB;AAHT,QAAT;AAKAvB,eAAQc,MAAR;AACD,MAfH,EAgBGU,KAhBH,CAgBSC,KAAK;AACVxB,cAAOwB,CAAP;AACD,MAlBH;AAmBD,IAlCM,CAAP;AAmCD,EArCD;;AAwCAlC,SAAQc,OAAR,GAAkB,UAAUX,MAAV,EAAkB;AAClC,UAAQ,YAAUA,OAAOQ,IAAK,sBAAmBZ,KAAM,UAAvD;AACD,EAFD;;AAIA;AACAC,SAAQkB,eAAR,GAA0B,UAAUd,KAAV,EAAiB;AACzC,UAAON,OAAOqC,SAAP,CAAiB/B,KAAjB,CAAP;AACD,EAFD;;AAIAJ,SAAQe,aAAR,GAAwB,UAAUZ,MAAV,EAAkB;AACxC,UAAO;AACLa,YAAOb,OAAOa,KADT;AAELL,WAAMR,OAAOQ,IAFR;AAGLyB,WAAM,CAHD;AAILC,WAAM;AAJD,IAAP;AAMD,EAPD;;AASA;AACArC,SAAQF,MAAR,GAAiBA,MAAjB;;AAEA;AACAE,SAAQY,gBAAR,GAA2B,UAAUP,GAAV,EAAe;AACxC,OAAIiC,IAAIjC,IAAIkC,OAAJ,CAAY,gBAAZ,EAA8B,EAA9B,CAAR;AACAD,OAAIA,EAAEE,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAJ;AACA,UAAOF,CAAP;AACD,EAJD;;AAMA,gBAAetC,OAAf,C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 785ad6db01af58a1fe1a","import Es2sql from 'es2sql';\n\nconst API_V = 'v2';\nlet Cartodb = {};\n\nCartodb.__type__ = \"cartodb\";\n\nCartodb.fetch = function (config) {\n  let query, url, urlWithQuery, sql;\n  return new Promise((resolve, reject) => {\n\t\t// parse user and query from url\n\t\tif (config.url) {\n      url = config.url;\n\t\t\tconfig.user = Cartodb._parseDatasetUrl(config.url);\n\t\t\tquery = config.url.match(/q=(.*)/g);\n\t\t// otherwise create a default query\n\t\t} else {\n      url = Cartodb._getUrl(config);\n\t\t\tquery = config.query || Cartodb._defaultQuery(config);\n\t\t\tquery.table = config.table;\n\t\t\tquery = encodeURIComponent(Cartodb._getQueryString(query));\n\t\t}\n    urlWithQuery = url+query;\n\t\t// Do fetch\n    fetch(urlWithQuery)\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        let output;\n        let fields = Object.keys(data.fields).map(function(val, i) {\n          return {id: val};\n        });\n        output = {\n          fields: fields,\n          rows:  data.rows,\n          useMemoryStore: false\n        };\n        resolve(output);\n      })\n      .catch(e => {\n        reject(e);\n      });\n\t\t});\n};\n\n\nCartodb._getUrl = function (config) {\n  return `https://${config.user}.cartodb.com/api/${API_V}/sql?q=`\n};\n\n// return the non urlencoded query\nCartodb._getQueryString = function (query) {\n  return Es2sql.translate(query);\n};\n\nCartodb._defaultQuery = function (config) {\n  return {\n    table: config.table,\n    user: config.user,\n    from: 0,\n    size: 100\n  }\n}\n\n// exports for testing\nCartodb.Es2sql = Es2sql;\n\n// Get usermame fron url\nCartodb._parseDatasetUrl = function (url) {\n  let s = url.replace(/http(s*):\\/\\//g, '');\n  s = s.split('.')[0];\n  return s;\n};\n\nexport default Cartodb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}